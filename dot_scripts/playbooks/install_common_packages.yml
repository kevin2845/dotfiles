---
- name: Install common packages
  hosts: localhost
  connection: local
  become: true
  gather_facts: yes

  vars:
    pkg_mode: install  
    common_packages:
      # common
      - git
      - curl
      - htop
      - lazygit
      - chezmoi
      - flatpak
      - neovim
      - ripgrep

      # Applications
      - alacritty

      # tmux helpers
      - tmux
      - fzf

      # Better CLI
      - eza
      - fastfetch
      - bat
      - starship
      
      # Networking
      - nmap
      - netcat
      - mtr
      - bind-utils
      - telnet

      # Toolchains
      - make
      - cmake
      - gcc
      - clang
      - python3
      - python3-pip
      - nodejs
      - npm
      - yarn
      - golang
      - rustup
      - docker

    flatpak_packages:
      - com.bitwarden.desktop
    flatpak_install_method: user

  tasks:
    - name: Set working list
      ansible.builtin.set_fact:
        os_packages: "{{ common_packages }}"

    - name: Debian/Ubuntu tasks
      ansible.builtin.include_tasks: tasks/debian.yml
      when: ansible_facts.os_family == 'Debian'
            and ((pkg_mode == 'install' and os_packages | length > 0) or (pkg_mode in ['update','upgrade']))

    - name: SUSE/openSUSE tasks
      ansible.builtin.include_tasks: tasks/suse.yml
      when: ansible_facts.os_family == 'Suse'
            and ((pkg_mode == 'install' and os_packages | length > 0) or (pkg_mode in ['update','upgrade']))

    - name: RedHat family tasks (RHEL/CentOS/Rocky/Alma/Fedora)
      ansible.builtin.include_tasks: tasks/redhat.yml
      when: ansible_facts.os_family == 'RedHat'
            and ((pkg_mode == 'install' and os_packages | length > 0) or (pkg_mode in ['update','upgrade']))

    - name: Arch/Manjaro tasks
      ansible.builtin.include_tasks: tasks/arch.yml
      when: ansible_facts.os_family == 'Archlinux'
            and ((pkg_mode == 'install' and os_packages | length > 0) or (pkg_mode in ['update','upgrade']))

    - name: Alpine tasks
      ansible.builtin.include_tasks: tasks/alpine.yml
      when: ansible_facts.os_family == 'Alpine'
            and ((pkg_mode == 'install' and os_packages | length > 0) or (pkg_mode in ['update','upgrade']))

    - name: macOS (Homebrew) tasks
      ansible.builtin.include_tasks: tasks/darwin.yml
      when: ansible_facts.os_family == 'Darwin'
            and ((pkg_mode == 'install' and os_packages | length > 0) or (pkg_mode in ['update','upgrade']))

    - name: Flatpaks (Linux only)
      ansible.builtin.include_tasks: tasks/flatpaks.yml
      when: ansible_facts.os_family != 'Darwin' and (
              (pkg_mode == 'install' and flatpak_packages | length > 0)
              or (pkg_mode in ['update','upgrade'])
            )

    # One-line failure summary (only for install mode)
    - name: Summarize failed installs
      when: pkg_mode == 'install'
      vars:
        failed_apt:      "{{ (apt_results.results      | selectattr('rc','defined') | selectattr('rc','ne',0) | map(attribute='item') | list) if (apt_results      is defined and apt_results.results      is defined) else [] }}"
        failed_zypper:   "{{ (zypper_results.results   | selectattr('rc','defined') | selectattr('rc','ne',0) | map(attribute='item') | list) if (zypper_results   is defined and zypper_results.results   is defined) else [] }}"
        failed_dnf:      "{{ (dnf_results.results      | selectattr('rc','defined') | selectattr('rc','ne',0) | map(attribute='item') | list) if (dnf_results      is defined and dnf_results.results      is defined) else [] }}"
        failed_yum:      "{{ (yum_results.results      | selectattr('rc','defined') | selectattr('rc','ne',0) | map(attribute='item') | list) if (yum_results      is defined and yum_results.results      is defined) else [] }}"
        failed_pacman:   "{{ (pacman_results.results   | selectattr('rc','defined') | selectattr('rc','ne',0) | map(attribute='item') | list) if (pacman_results   is defined and pacman_results.results   is defined) else [] }}"
        failed_apk:      "{{ (apk_results.results      | selectattr('rc','defined') | selectattr('rc','ne',0) | map(attribute='item') | list) if (apk_results      is defined and apk_results.results      is defined) else [] }}"
        failed_brew:     "{{ (brew_results.results     | selectattr('rc','defined') | selectattr('rc','ne',0) | map(attribute='item') | list) if (brew_results     is defined and brew_results.results     is defined) else [] }}"
        failed_flatpak:  "{{ (flatpak_results.results  | selectattr('rc','defined') | selectattr('rc','ne',0) | map(attribute='item') | list) if (flatpak_results  is defined and flatpak_results.results  is defined) else [] }}"
        all_failed: "{{ (failed_apt + failed_zypper + failed_dnf + failed_yum + failed_pacman + failed_apk + failed_brew + failed_flatpak) | unique }}"
      ansible.builtin.debug:
        msg: "Failed packages: {{ all_failed | join(', ') if all_failed|length > 0 else 'None' }}"
